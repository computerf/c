1.3new操作符
C++中利用new操作符在堆区中开辟数据
堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete

1.3.1new的基本语法
int* func() {
	//在堆区创造整形数据
	//new返回的是该数据类型的指针
	int* p = new int(10);
	return p;
                                  }
int main() {

	int* p = func();
	cout << *p << endl;
	cout << *p << endl;
	//堆区数据由程序员管理开辟
	//如果想释放用delete 操作符
	delete p;
	return 0;
                              }
1.3.2堆区开辟数组     int *arr=new int[10]   ,new返回的是该数据类型的首元素的地址
释放数组的时候要加[],   delete []arr;




2 引用（重点）
2.1引用的基本作用:给变量起别名
语法:数据类型  &别名 - 原名
	int a = 10;
	int& b = a;
	b = 20;
	cout << a << endl;
	cout << b << endl;
操作b就是操作a，打印出来都是20，内存都是同一块

2.2引用注意事项
1引用必须初始化:     int &b;    //错误的
2初始化后，不可以改变   
int a=10;
int &b=a;
int c=20;
b=c;   //这是赋值操作                            (a,b,c)都等于20
3.没有引用数组，没有引用的引用，没有引用的指针



2.3引用做函数参数
作用:函数传参时，可以利用引用的技术让形参修饰实参
优点:可以简化指针修改实参
void MySwap(int &a, int &b)     //引用传递
{
	int temp = a;
	a = b;
	b = temp;

         }
总结：通过引用参数产生的效果同地址传递是一样的，引用的用法更清楚简单



2.4引用做函数返回值
作用：引用是可以作为函数的返回值
注意：不要返回局部变量引用
int& test01()//错误的
{
	int a = 10;
	return a;
}
用法：函数调用作为左值(使用static延长生命周期)
test02()=1000;
int& test02()//正确的
	static int a = 10;
	return a;
}

2.5引用的本质
本质：引用的本质在c++内部实现是一个指针常量    
总结：c++推荐引用技术，语法方便，本质是指针常量，但是所有指针操作编译器帮我们做了

2.6常量引用
作用：常量引用主要用来修饰形参，防止误操作



