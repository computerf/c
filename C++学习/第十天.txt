4.5运算符重载
对于内置的数据类型，编译器知道如何进行运算
例：int a=10 ;  int b=10 ;  int c=a+b;

运算符重载概念:对已有的运算行重新进行定义，赋予其另1种功能，以适应不同的数据类型
 

4.5.1加号运算符重载
作用：实现2个自定义数据类型相加的运算
class Person {
public:
	int m_A;
	int m_B;

	//1.成员函数重载+号
	//Person operator+(Person& p)
	//{
	//	Person temp;
	//	temp.m_A = this->m_A + p.m_A;
	//	temp.m_B = this->m_B + p.m_B;
	//	return temp;
	//}
};

//2.全局函数重载+号
Person operator+(Person& p1, Person& p2)
{
	Person temp;
	temp.m_A = p1.m_A + p2.m_A;
	temp.m_B = p1.m_B + p2.m_B;
	return temp;
}
Person operator+(Person& p1, int num)
{
	Person temp;
	temp.m_A = p1.m_A + num;
	temp.m_B = p1.m_B + num;
	return temp;
}
void test01()
{
	Person p1;
	p1.m_A = 10;
	p1.m_B = 10;
	Person p2;
	p2.m_A = 10;
	p2.m_B = 10;
	//成员函数重载本质调用
	//Person p3=p1.operator+(p2);
	//全局函数重载本质调用
	//Person p3=operator+(p1,p2);
	Person p3 = p1 + p2;
	Person p4 = p1 + 100;

	//运算符重载，也可以发生函数重载

	cout << "p3.m_A=" << p3.m_A << endl << "p3.m_B=" << p3.m_B << endl;
	cout << "p4.m_A=" << p4.m_A << endl << "p4.m_B=" << p4.m_B << endl;
}
总结1：对于内置的数据类型的表达式的的运算符是不可能改变的
总结2：不要滥用运算符重载



4.5.2左移运算符重载
作用:可以输出自定义数据类型
class Person {

	friend	ostream& operator<<(ostream& cout, Person& p);
public:
	Person(int a, int b) :m_A(a), m_B(b) {};

private:
	//利用成员函数重载 左移运算符
	//不能利用成员函数重载<<运算符，因为无法实现cout在左侧
	
	
	int m_A;
	int m_B;
};
//只能利用全局函数重载左移运算符
ostream& operator<<(ostream& cout, Person& p)
{
	cout << "m_A=" << p.m_A << "m_B=" << p.m_B ;
	return cout;
}
void test01()
{  
	Person p(10,10);
	
	cout << p << endl;
}
//总结:重载左移运算符配合友元可以实现输出自定义数据类型

//4.递增运算符重载++
//class MyInterger {
//	friend ostream& operator<<(ostream& cout, MyInterger myint);
//public:
//	MyInterger() {
//		m_Num = 0;
//	}  
//
//	//重载前置++运算符    返回引用为了一直对一个数据进行递增操作
//	MyInterger& operator++()   
//	{  //先＋＋运算
//		m_Num++;
//		//在将自身返回
//		return *this;
//	}
//
//	//重载后置++运算符 ,返回值，不返回引用（因为局部变量会销毁）
//	MyInterger operator++(int) //int 代表占位参数，可以用于区分前和后递增
//	{  
//		//先记录当时结果
//		MyInterger temp = *this;
//		//后递增
//		m_Num++;
//		//最后将记录结果返回
//		return temp;
//	}
//private:
//	int m_Num;
//
//};
////重载<<运算符
//ostream& operator<<(ostream& cout, MyInterger myint)
//{
//	cout << myint.m_Num;
//	return cout;
//}
//
//void test01()
//{
//	MyInterger myint;
//	cout << ++(++myint) << endl;
//	cout << myint << endl;
//	
//}
//
//void test02()
//{
//	MyInterger myint;
//	cout << myint++ << endl;
//	cout << myint << endl;
//}



4.5.4赋值运算符重载

C++编译器至少给一个类添加4个函数
1.(默认构造函数(无参，函数体为空)
2.(默认析构函数(无参，函数体为空)
3.默认拷贝构造函数，对属性进行值拷贝
4.赋值运算符算子=，对属性进行值拷贝
如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题
class Person {
public:
	Person(int age)
	{
		m_Age=new int(age);
	}
	~Person()
	{
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;
		}
	}
	//重载 赋值运算符
	Person& operator=(Person& p)
	{
		//编译器提供浅拷贝
		//m_Age=p.m_Age;
		//应该先判断是否有属性在堆区，如果有，先释放干净，然后再深拷贝
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;

		}
		m_Age = new int(*p.m_Age);
		return *this;
	}

	int* m_Age;
};
void test01()
{
	Person p1(18);
	Person p2(20);
	Person p3(30);
	 p3=p1 = p2;

	cout << "p1的年龄为" << *p1.m_Age << endl;
	cout << "p2的年龄为" << *p2.m_Age << endl;
	cout << "p3的年龄为" << *p3.m_Age << endl;
}
int main()
{
	test01();
	//int a = 10;
	//int b = 20;
	//int c = 30;
	//c = b = a;
	//cout << "a=" << a << endl;
	//cout << "b=" << b << endl;
	//cout << "c=" << c << endl;
	return 0;
}




