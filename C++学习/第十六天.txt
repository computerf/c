3.3 deque容器
3.3.1 deque容器基本概念
功能 :
双端数组，可以对头端进行插入删除操作
deque与vector区别 :
vedtor对于头 部的插入删除效率低，数据量越大, 效率越低
deque相对而言，对头部的插入删除速度回比vector快
vector访问元素时的速度 会比deque快, 这和两者内部实现有关




3.3.4 deque大小操作
功能描述 :
对deque容器的大小进行操作
函数原型 :
deque.empty();
判断容器是否为空
deque.size();
返回容器中元素的个数
deque.resize(num);
 重新指定容器的长度为num, 若容器变长，则以默认值填充新位置。
如果容器变短，则末尾超出容器长度的元素被删除。
deque.resize(num, elem); 重新指定容器的长度为num,若容器变长，则以elem值填充新位置。
如果容器变短，则末尾超出容器长度的元素被删除。



3.3.5 deque插入和删除
功能描述 :
向deque容器中插入和删除数据
函数原型 : .
两端插入操作 :
	push_ back(elem);
在容器尾部添加一个数据
push_ front(elem);
在容器头部插入一个数据
pop_ back();
删除容器最后一个数据
pop_ front();
删除容器第一个数据
指定位置操作:
 insert(pos, elem);
在pos位置插入一个elem元素的拷贝，返回新数据的位置。
 insert(pos, n, elem);
在pos位置插入n个elem数据，无返回值。
insert(pos, beg, end); 在pos位 置插入[beg,end)区间的数据，无返回值。
clear();
清空容器的所有数据
  erase(beg, end);
删除[beg, end)区间的数据，返回下一个数据的位置。
erase(pos);
删除pos位置的数据，返回下一个数据的位置。


3.3.6 deque数据存取
功能描述:
●对deque 中的数据的存取操作
函数原型:
●at(int idx);] //返回索引dx所指的数据
operator[];] //返回索引idx所指的数据
●front();
1/返回容器中第一个数据元素
back();
1/返回容器中最后一个数据元素



3.5stack容器
概念：先进后出数据结构，只有一个出口

3.5.2stack常用接口
构造函数
stack<T> stk;  //默认构造
 stack<const stack &stk> //拷贝构造
赋值操作
stack& operator=(const stack &stk) //重载等号运算符
数据存取
push(elem) //栈顶加元素
pop()       //栈顶移除元素
top()        //返回栈顶元素
大小操作
empty()  //是否为空
size()  //返回栈的大小


