1.内存分区模型
（1）代码区:存放函数体的二进制代码,由操作系统进行管理
（2）全局区:存放全局变量和静态变量以及常量
（3）栈区:编译器自动分配释放,存放函数的参数值，局部变量
（4）堆区:由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收
意义:不同区域存放不同的数据，赋予不同的生命周期,给我们更大的灵活编程


1.1程序运行前
在程序编译后，生成exe可执行程序，未执行该程序前分为两个区域
代码区：
存放CPU执行的机器指令
特点:（1）代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
（2）代码区是只读的，使其只读的原因是防止程序意外的修改了它的指令

全局区：分为变量区和常量区
特点:
存放全局变量和静态变量存放在此
全局区还包含了常量区，字符串常量和其他常量，const修饰的全局变量存放在此
该区域的数据在程序结束后由系统操作释放


1.2程序运行后
栈区:
由编译器自动分配释放，存放函数的参数值，局部变量，const修饰的局部变量
注意事项：不要返回局部变量的地址，栈区开辟的地址由编译器释放
例：错误的
int* fun()
{
int a=10;
return &a;
}
cout << *p << endl;//第一次可以打印正常数字，编译器做了保留
cout << *p << endl;//第二次助攻数据不再保留


堆区:
由程序员分配释放，若程序员不释放，程序结束时操作系统回收
在c++中只要利用new在堆区中开辟内存 








