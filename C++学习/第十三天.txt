c++提高编程

本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层的使用
1.模板
1.1模版的概念
模板就是建立通用的模具，大大提高复用性

模板特点:
1.模板不可以直接使用，它只是一个框架
2.模板的通用不是万能的

1.2函数模板
C++另-种编程思想称为泛型编程，主要利用的技术就是模板
C++提供两种模板机制:函数模板和类模板

1.2.1函数模板语法
函数模板作用：
建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用-个虚拟的类型来代表.
语法：
template<typename T>
函数定义或声明
解释：
template---声明创建模板
typename --- 表明其后面的符号是一种数据类型，可以用class替代
T--- 通用的数据类型，名称可以替换，通常是大写字母

两种使用函数模板
1.自动类型推导
    mySwap(a, b);
2.显式指定类型
mySwap<int>(a, b);
	
1.2.2函数模板注意事项
注意事项：
自动类型推导，必须推导出一致的数据类型T，才可以使用
模板必须要确定出T的数据类型，才可以使用


1.2.4普通函数与函数模板的区别
普通函数与函数模板区别：
普通函数调用时可以发生自动类型转换(隐式类型转换)
函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换
如果利用显示指定类型的方式，可以发生隐式类型转换



1.2.5普通函数与函数模板的调用规则
调用规则如下：
1.如果函数模板和普通函数都可以实现，优先调用普通函数
2.可以通过空模板参数列表来强制调用函数模板
3.函数模板也可以发生重载
4.如果函数模板可以产生更好的匹配，优先调用函数模板

1.2.6模板的局限性
总结：
利用具体化的模板，可以解决自定义类型的通用化
我
学习模板并不是为了写模板，而是在stl能够运用系统提供的模板



1.3类模板
1.3.1类模板语法
类模板作用：
建立一个通用类，类中的成员数据类型可以不具体制定，用一个虚拟的类型来代表.

类模板语法
template <class NameType,class AgeType>
class  Person
{ public:
	Person(NameType name,AgeType age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}
	void showPerson()
	{
		cout << "name:" << m_Name << endl;
		cout << "age:" << m_Age << endl;
	}
	NameType m_Name;
	AgeType m_Age;
};

void test01()
{
	Person<string, int> p1("孙悟空", 999);
	p1.showPerson();
}
int main()
{
	test01();
	return 0;

}


1.3.2类模板与函数模板区别
类模板与函数模板区别主要有两点：
1.类模板没有自动类型推导的使用方式
2.类模板在模板参数列表中可以有默认参数
template <class NameType,class AgeType>
class Person {
public:
	Person(NameType name, AgeType age)
	{
		m_Name = name;
		m_Age = age;
	}
	void showPerson(){
		cout << "姓名：" << m_Name << endl;
		cout << "年龄：" << m_Age << endl;
	}
	NameType m_Name;
	AgeType m_Age;
};
//类模板没有自动类型推导的使用方式
void test01()
{
	//Person<> p("孙悟空", 1000); 错误，无法使用自动类型推导
	Person<string, int> p("孙悟空", 1000); //正确，只能用显示指定类型
	
}
int main()
{


	return 0;
}


1.3.3类模板中成员函数创建时机
类模板中成员函数和普通类中成员函数创建时机是有区别的：
普通类中的成员函数一开始就可以创建
类模板中的成员函数在调用时才创建




1.3.4类模板对象做函数参数
学习目标：
类模板实例化出的对象，向函数传参的方式
一共有三种传入方式：
1.指定传入的类型 - 直接显示对象的数据类型
2.参数模板化-将对象中的参数变为模板进行传递
3.整个类模板化- 将这个对象类型模板化进行传递

template<class T1, class T2>
class Person {
public:
	Person(T1 name, T2 age)
	{
		m_Name = name;
		m_Age = age;
	}
	void showPerson()
	{
		cout << "姓名:" << m_Name << endl;
		cout << "年龄:" << m_Age << endl;
	}

	T1 m_Name;
	T2 m_Age;
};

//1.指定传入类型
void printPerson1(Person<string, int>& p)
{
	p.showPerson();
}

void test01()
{
	Person<string, int > p("孙悟空", 100);
	printPerson1(p);
}

//2.参数模板化
template<class T1,class T2>
void printPerson2(Person<T1,T2>&p)
{
	p.showPerson();
	cout << "T1的类型为：" << typeid(T1).name() << endl;
	cout << "T2的类型为：" << typeid(T2).name() << endl;

}
void test02()
{
	Person<string, int > p("猪八戒", 90);
	printPerson2(p);
}

//3.整个类模板化
template<class T>
void printPerson3(T& p)
{
	p.showPerson();
	cout << "T的数据类型为:" << typeid(T).name();
}

void test03()
{
	Person<string, int> p("TS",30);
	printPerson3(p);
}
int main()
{
	//test01();
	//test02();
	test03();
	return 0;
}
总结：
通过类模板创建的对象，可以有三种方式向函数中进行传参
使用比较广泛是第一种:指定传入的类型



1.3.5类模板与继承
当类模板碰到继承时，需要注意 - 下几点：
当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型
如果不指定，编译器无法给子类分配内存
如果想灵活指定出父类中T的类型，子类也需变为类模板

template<class T>
class Base {
public:
	T m;

};
class Son :public Base<int> {


};
void test01()
{
	Son s1;
	cout << sizeof(s1) << endl;
}
如果想灵活指定出父类中T的类型，子类也需变为类模板
template<class T1,class T2>
class Son2 :public Base<T2>
{
public:
	Son2()
	{
		cout << "T1的类型为：" << typeid(T1).name() << endl;
		cout << "T2的类型为：" << typeid(T2).name() << endl;
	}
	T1 obj;
};
void test02()
{
	Son2<int, char>s2;


}
int main()
{
	test01();
	test02();
	return 0;
}
总结:如果父类是类模板，子指需要指定出父类中T的数据类型


//1.3.6类模板成员函数类外实现

template<class T1,class T2>
class Person {
public:
	Person(T1 name, T2 age);


	void showPerson();
	
	T1 m_Name;
	T2 m_Age;
};

构造函数类外实现
template<class T1,class T2>
Person<T1,T2>::Person(T1 name, T2 age)
{
	m_Name = name;
	m_Age = age;
}

成员函数类外实现
template<class T1, class T2>
void Person<T1, T2>::showPerson()
{
	
	cout << "姓名为" << m_Name << endl;
	cout << "年龄为" << m_Age << endl;

}
void test01()
{
	Person<string, int> p("Tom", 20);
	p.showPerson();
}
int main()
{
	test01();
	return 0;
}

1.3.8类模板与友元
学习目标：
掌握类模板配合友元函数的类内和类外实现
全局函数类内实现 - 直接在类内声明友元即可
全局函数类外实现 - 需要提前让编译器知道全局函数的存在

总结:建议全局函数做类内实现，用法简单，而且编译器可以直接识别

