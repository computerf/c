3.2vector容器
3.2.1vector基本概念
功能：
vector数据结构与数组相似,也称为单端数组

vector与普通数组区别：
数组是静态空间，vector可以动态扩展

动态扩展：
并不是在原空间之后接续新空间，而是找更大的内存空间，将原数据拷贝新空间，释放原空间

3.2.2vector构造函数

函数原型
vector<T> v;   采用模板类实现，默认构造函数
vector <v.begin(), v.end()>     将v[begin(),end()]区间的元素拷贝给本身
vector <n,elem>      构造函数将n个elem拷贝给本身
vector<const vector &vec>  拷贝构造函数

 
3.2.3vecotr赋值操作
函数原型:
vector& perator=(const vector &vec); //重载等号操作符
assign(beg,end);  //将[begin,end]区间中的数据拷贝赋值给本身
assign(n,elem)  //将n个elem拷贝赋值给本身


3.2.4 vector容量和大小
功能描述:
对vector容器的容星和大小操作
函数原型:
empty();
//判断容器是否为空
capacity();
1/容器的容量
size(); .
1/返回容器中元素的个数
resize(int num);
//重新指定容器的长度为num,若容器变长，则以默认值填充新位置。
//如果容器变短，则末尾超出容器长度的元素被删除。
resize(int num, elem); //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。
//如果容器变短，则末尾超出容器长度的元素被删除


3.2.5 vector插入和删除
功能描述 :
对vector容器进行插入、 删除操作
函数原型 :
  push.back(le);
尾部插入元素ele
  pop.back();
删除最后一个元索
  insert(const_ iterator pos, ele);
迭代器指向位置pos插入元素ele
  insert(const._iterator pos, int count, ele); //迭代器指向位置pos插入count个元素ele
erase(const_ iterator pos);
 删除迭代器指向的元素
 erase(const_ iterator start, const.iterator end); //删除迭代器从start到end之间的元素
clear();
删除容器中所有元索

swap();
总结：交换可以使两个容器互换，可以达到实用的收缩内存效果


3.2.6 vector数据存取
功能描述 :
对vector中的数据的存取操作
函数原型 :
at(iht idx);
返回索引idx所指的数据
operator[];
返回索弓lidx所指的数据
 front();
返回容器中第一个数据元素
back();
返回容器中最后 - 一个数据元素



