4.4友元
生活中你的家有客厅(public)、有你的卧室(private)
客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去
但是呢，你也可以允许你的好闺蜜好基友进去.

在程序里，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术

友元的目的就是让一个函数或者类访问另一个类中私有成员

友元的关键字为friend

友元的三种实现
全局函数做友元
类做友元
成员函数做友元


//全局函数做友元
class Building
{  //goodGay全局函数是Building好朋友，可以访问building私有成员
	friend void goodGay(Building* building);
public:
	Building() {
		SittingRoom_ = "客厅";
		BedRoom_ = "卧室";
	}
public:
	string SittingRoom_;//客厅

private:
	string BedRoom_;

};

void goodGay(Building* building)
{
	cout << "好朋友的全局函数 正在访问:" << building->SittingRoom_ << endl;
	cout << "好朋友的全局函数 正在访问:" << building->BedRoom_ << endl;
}
void test01()
{
	Building building;
	goodGay(&building);
}
int main()
{
	test01();

	system("pause");
	return 0;
}


class Building;

class GoodGay {
public:

	void visit();//参观函数，访问Building中的属性
	Building*  building;
	GoodGay();
};

class Building {
	//GoodGay类是本类的好朋友，可以访问私有成员
	friend	class GoodGay;
public:
	Building();

public:
	string SittingRoom_;//客厅

private:
	string BedRoom_;//卧室
};
 
//类外写成员函数
Building::Building() {
	SittingRoom_ = "客厅";
	BedRoom_ = "卧室";
}
GoodGay::GoodGay() {
	     //创建建筑物对象
	building = new Building;
}
void GoodGay::visit() {
	cout << "好朋友正在访问" << building->SittingRoom_ << endl;
	cout << "好朋友正在访问" << building->BedRoom_ << endl;
}
void test01()
{
	GoodGay gg;
	gg.visit();
} 
int main()
{
	test01();
	return 0;
}



成员函数做友元
class Building;
class GoodGay {
public:
	GoodGay();
	void visit(); //访问Building中的私有成员
	void visit2();//不可以访问Building中的私有成员
	Building* building;
}; 
class Building {
	//告诉编译器 GoodGay类下的visit成员函数作为有权限的朋友，可以访问私有成员
	friend void GoodGay::visit();
public:
	Building();
public:
	string SittingRoom_;

private:
	string BedRoom_;
};

//类外构造
Building::Building()
{
	SittingRoom_ = "客厅";
	BedRoom_ = "卧室";
}
GoodGay::GoodGay() {
	building = new Building;
}

void GoodGay::visit()
{
	cout << "visit正在访问" << building->BedRoom_ << endl;
	cout << "visit正在访问" << building->SittingRoom_ << endl;
}

void GoodGay::visit2()
{
	cout << "visit2正在访问" << building->SittingRoom_ << endl;
	//cout << "visit2正在访问" << building->BedRoom_ << endl;// 没有权限无法访问私有成员
}
void test01()
{
	GoodGay gg;
	gg.visit();
	gg.visit2();
}
int main()
{
	test01();
	return 0;
}
