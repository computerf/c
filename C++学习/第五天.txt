3函数提高
3.1函数默认参数
在c++中，函数的形参是可以有默认值的
语法：返回值类型 函数名 （参数=默认值）{ }
//如果传入了数据， 就用自己的数据，如果没有， 就用默认值
int fun（int a，int b=20，int c=30）
{  return a+b+c；
        }

//注意事项
//1.如果某个位置有了默认参数，那么从这个位置往后都要有默认值
int main(){
cout<<fun(10)<<endl;        //60
}

//2.如果函数声明有默认参数，函数实现就不能有默认参数
//声明和实现只能有一股默认参数
int func2(int a=10, int b=10);

int fun2(int a=10, int b=10)  //错误的
{
	return a + b;
}



3.2函数占位参数
c++中函数的形参列表可以有占位参数，用来做占位，调用函数时必须填补该位置
语法： 返回值类型 函数名(数据类型){ }
//占位参数可以有默认参数
例如：
void func(int a,int =10)
{
	cout << "this is func" << endl;
}


//重点！！！
3.3函数重载
3.3.1函数重载概述
作用：函数名可以相同，提高复用性
函数重载满足条件：
1.同一个作用域下
2.函数名称相同
3.函数参数类型不同或个数不同或顺序不同
注意：函数的返回值不可以作为函数重载的条件
void func()
{
	cout << "func的调用" << endl;
}
void func(int a)
{
	cout << "func (int a)的调用" << endl;
}
void func(double a)
{
	cout << "func (double a)的调用" << endl;
}
void func(double a, int b)
{
	cout << "func (double a,int b)的调用" << endl;
}
void func(int a, double b)
{
	cout << "func (int a,double b)的调用" << endl;
}

int main()
{
	func();
	func(1);
	func(3.14);
	func(10, 3.14);
	func(3.14, 10);
	system("pause");
	return 0;
}


3.3.2函数重载注意事项
1.引用作为重载条件
2.函数重载碰到函数默认参数
//1.引用作为重载条件

void fun(int &a)//int &a=10;
{
	cout << "func()的调用" << endl;
}

void fun(const int& a)// const int &a=10;
{
	cout << "func(const int &a)的调用" << endl;
}

//2.函数重载碰到默认参数
void fun1(int a,int b=10)
{
	cout << "fun1(int a,int b)的调用" << endl;
}
void fun1(int a)
{
	cout << "fun1(int a)的调用" << endl;
}
int main()
{
	// int a = 10;
	 //const int b = 10;
	//fun1(10);
	//fun1(10);
	fun1(10,20);//函数重载碰到默认参数，出现二义性，报错，尽量避免这个情况

	return 0;
}


