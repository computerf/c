#define _CRT _SECURE_NO_ WARNINGS 1
#include"workerManger.h"

WorkerManger::WorkerManger()
{
	//初始化属性
	ifstream ifs;
	ifs.open(FILENAME, ios::in); //读文件
	//1.文件不存在
	if (!ifs.is_open()) {
	//	cout << "文件不存在" << endl;
		this->m_FileIsEmpty = true;
		this->m_EmpNum = 0;
		this->m_EmpArray = NULL;
		ifs.close();
		return;
	
	}
	//2.文件存在，数据为空
	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		//代表文件为空
	//	cout << "文件为空!" << endl;
		this->m_FileIsEmpty = true;
		this->m_EmpNum = 0;
		this->m_EmpArray = NULL;
		ifs.close();
		return;
		
	}
	//3.当文件存在，并且记录数据
	int num = this->get_EmpNum();
//	cout << "职工人数为：" << num << endl;
	this->m_EmpNum = num;
	//开辟空间
	this->m_EmpArray = new Worker * [this->m_EmpNum];
	//将文件中的数据，存到数组中
	this->init_Emp();
	//for (int i = 0; i < this->m_EmpNum; i++)
	//{
	//	cout << "职工编号:" << this->m_EmpArray[i]->m_Id
	//		<< "职工姓名:" << this->m_EmpArray[i]->m_Name
	//		<< "部门编号:" << this->m_EmpArray[i]->m_DeptId << endl;
	//}

}
WorkerManger::~WorkerManger()
{
	if (this->m_FileIsEmpty != NULL)
	{
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			if (this->m_EmpArray[i] != NULL)
			{
				delete this->m_EmpArray[i];
		   }
		 }
		delete[] this->m_EmpArray;
		this->m_EmpArray = NULL;
  }
}

void WorkerManger::Show_Menu()
{
	cout << "********************************" << endl;
	cout << "*********  职工管理系统**********" << endl;
	cout << "********* 0.退出管理系统*********" << endl;
	cout << "**********1.增加职工信息*******" << endl;
	cout << "**********2.显示职工信息********" << endl;
	cout << "**********3.删除离职职工*********" << endl;
	cout << "**********4.修改职工信息********" << endl;
	cout << "**********5.查找职工信息********" << endl;
	cout << "**********（未实现）6.按照编号排序*******" << endl;
	cout << "***********7.清空所有文档*******" << endl;
	cout << "********************************" << endl;
	cout << endl;
}

void WorkerManger::exitSystem()
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}
void WorkerManger::Add_Emp()
{
	cout << "请输入添加职工数量:" << endl;
	int addNum = 0;//保存用户的输入数量
	cin >> addNum;
	if (addNum > 0)
	{
		//添加
		//计算添加新空间大小
		int newSize = this->m_EmpNum + addNum;//新空间人数=原来记录人数+新增人数
		//开辟新空间
		Worker** newSpace = new Worker * [newSize];
		//将原来空间下数据，拷贝到新空间下
		if (this->m_EmpArray != NULL)
		{
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				newSpace[i] = this->m_EmpArray[i];
			}
		}

		//添加新数据
		for (int i = 0; i < addNum; i++)
		{
			int id;//职工编号
			string name;//职工姓名
			int dSelect;//部门选择
			cout << "请输入第" << i + 1 << "个新职工编号:" << endl;
			cin >> id;
			cout << "请输入第" << i + 1 << "个新职工姓名:" << endl;
			cin >> name;
			cout << "请选择该职工岗位:" << endl;
			cout << "1.普通职工" << endl;
			cout << "2.经理" << endl;
			cout << "3.老板" << endl;
			cin >> dSelect;
			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1:
			{worker = new Employee(id, name, 1);
			break;
			}
			case 2:
			{worker = new Manger(id, name, 2);
			break;
			}
			case 3:
			{	worker = new Boss(id, name, 3);
			break;
			}
			default:
				break;
			}
			//将创建职工职责,保存到数组中
			newSpace[this->m_EmpNum + i] = worker;
		}
		//释放原来空间
		delete[] this->m_EmpArray;
		//更改新空间指向
		this->m_EmpArray = newSpace;
		//更新新的职工人数
		this->m_EmpNum = newSize;
		//更新职工不为空标志
		this->m_FileIsEmpty = false;
		
		cout << "成功添加了" << addNum << "名新职工" << endl;
		//保存数据到文件
		this->save();
		system("pause");
		system("cls");

	}

}
void WorkerManger::save()
{
	ofstream ofs;
	ofs.open(FILENAME, ios::out);//写文件
	//将每一个人数据写到文件中
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		ofs  <<this->m_EmpArray[i]->m_Id << " "
			<< this->m_EmpArray[i]->m_Name << " "
			<< this->m_EmpArray[i]->m_DeptId << endl;
	}
	ofs.close();
}

int WorkerManger::get_EmpNum()
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);//打开文件 读
	int id;
	string name;
	int dId;
	int num = 0;
	while (ifs >> id && ifs >> name && ifs >> dId)
	{
		num++;
	}
	return num;
}

//初始化员工
void WorkerManger::init_Emp()
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);
	int id;
	string name;
	int dId;
	int index = 0;
	while (ifs >> id && ifs >> name && ifs >> dId)
	{
		Worker* worker = NULL;
		if (dId == 1) //普通职工
		{
			worker = new Employee(id, name, dId);
		}
	 	else if  (dId ==2) //经理
		{
			worker = new Manger(id, name, dId);
		}
		else  //老板
		{
			worker = new Boss(id, name, dId);
		}
		this->m_EmpArray[index] = worker;
		index++;
	}
	ifs.close();
}

void WorkerManger::Show_Emp()
{
	//判断文件是否为空
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空" << endl;
	}
	else
	{
		for (int i = 0; i < m_EmpNum; i++)
		{
			//利用多态调用程序接口
			this->m_EmpArray[i]->showInfo();
		}
	}
	system("pause");
	system("cls");

}

int WorkerManger::IsExist(int id)
{
	int Index = -1;
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		if (m_EmpArray[i]->m_Id ==id) {
			Index = i;
			break;
		}
		
	}
	return Index;

}

void WorkerManger::Del_Emp()
{
	if (this->m_FileIsEmpty)
		cout << "文件不存在或记录为空" << endl;
	else
	{
		cout << "请输入想要删除职工编号" << endl;
		int id = 0;
		cin >> id;
		int index=this->IsExist(id);
		if (index != -1) //说明职工存在，并且删除掉index位置上职工
		{
			for (int i = index; i < this->m_EmpNum - 1; i++)
			{  //数据前移
				this->m_EmpArray[i] = this->m_EmpArray[i + 1];
			}
			this->m_EmpNum--; //更新数组中记录人员个数
			//同步更新到文件中
			this->save();
			cout << "删除成功!" << endl;
		}
		else
		{
			cout << "删除失败，未找到该职工" << endl;
		}
	}
	system("pause");
	system("cls");
}

void WorkerManger::Mod_Emp() {
	if (this->m_FileIsEmpty)
		cout << "文件不存在或记录为空" << endl;
	else
	{
		int id = 0;
		cout << "请输入你要修改职工的编号" << endl;
		cin >> id;
		int ret=this->IsExist(id);
		if (ret != -1)
		{
			//查找到编号的职工
			delete this->m_EmpArray[ret];
			int newId = 0;
			string newName = "";
			int dSelect = 0;
			cout << "查找:" << id << "号职工，请输入新职工号" << endl;
			cin >> newId;
			cout << "请输入新姓名:" << endl;
			cin >> newName;
			cout << "请选择该职工岗位:" << endl;
			cout << "1.普通职工" << endl;
			cout << "2.经理" << endl;
			cout << "3.老板" << endl;
			cin >> dSelect;
			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1:
			{	worker = new Employee(newId, newName, 1);
			break;
			}
			case 2:
			{	worker = new Manger(newId, newName, 2);
			break;
			}
			case 3:
			{	worker = new Boss(newId, newName, 3);
			break;
			}
			default:
				break;
			}
			this->m_EmpArray[ret] = worker;
			cout << "修改成功" << this->m_EmpArray[ret]->m_DeptId << endl;
			this->save();
		}
		else
			cout << "修改失败，要修改的职工不存在" << endl;
	}

	system("pause");
	system("cls");

}

void WorkerManger::Find_Emp() {
	if (this->m_FileIsEmpty)
		cout << "文件不存在或记录为空" << endl;
	else
	{
		cout << "请输入查找方式" << endl;
		cout << "1.按职工编号查找" << endl;
		cout << "2.按姓名查找" << endl;
		int select = 0;
		cin >> select;
		if (select == 1)
		{
			int id = 0;
			cout << "请输入你要查找职工的id" << endl;
			cin >> id;
			int ret = this->IsExist(id);
			if (ret != -1)
			{
				cout << "查找成功！该职工信息如下" << endl;
				this->m_EmpArray[ret]->showInfo();


			}
			else
			{
				cout << "要查找的职工不存在" << endl;
			}

		}
		else if (select == 2)
		{
			string name;
			cout << "请输入查找的姓名:" << endl;
			cin >> name;
			bool flag = false;
			for (int i = 0; i < m_EmpNum; i++)
			{
				if (m_EmpArray[i]->m_Name == name)
				{
					cout << "查找成功，职工编号为" <<
						m_EmpArray[i]->m_Id
						<< "号的信息如下" << endl;
					flag = true;
					this->m_EmpArray[i]->showInfo();
				}
			}
			if (flag == false)
				cout << "查找失败，查无此人" << endl;
		}
	}

	system("pause");
	system("cls");
}
void WorkerManger::Sort_Emp()
{
	//排序
}


void WorkerManger::Clean_File()
{
	cout << "确定清空？" << endl;
	cout << "1.确定" << endl;
	cout << "2.返回" << endl;

	int select = 0;
	cin >> select;
	if (select == 1)
	{
		ofstream ofs(FILENAME, ios::trunc); //删除文件后重新创建
		ofs.close();
		if (this->m_EmpArray != NULL)
		{//删除堆区每一个职工对象
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				delete this->m_EmpArray[i];
				this->m_EmpArray[i] = NULL;
			}
			//删除堆区数组指针
			delete[] this->m_EmpArray;
			this->m_EmpArray = NULL;
			this->m_EmpNum = 0;
			this->m_FileIsEmpty = true;
		}
		cout << "清空成功！" << endl;
	}
	system("pause");
	system("cls");
}